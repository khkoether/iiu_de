Installation in Ubuntu: JRuby 1.7.9, Ruby on Rails 4
====================================================
Karl-Heinz Köther <&#107;&#104;&#107;&#111;&#101;&#116;&#104;&#101;&#114;&#064;&#107;&#097;&#104;&#119;&#101;&#098;&#046;&#100;&#101;>

:icons:
:Author Initials: KHK
:creativecommons-url: http://creativecommons.org/licenses/by-sa/3.0/de/
:ubuntu-url: http://www.ubuntu.com/
:asciidoc-url: http://www.methods.co.nz/asciidoc/
:ruby-url: http://www.ruby-lang.org/
:ruby-download-url: http://www.ruby-lang.org/de/downloads/
:ruby-ftp: ftp://www.ruby-lang.org/pub/ruby/1.9/
:rubyonrails-url: http://www.rubyonrails.org
:java-url: http://www.oracle.com/technetwork/java/javase/downloads/index.html
:jruby-url: http://jruby.org/
:jruby-download-url: http://jruby.org/download

:jdk-url: link:jdk.html
:jruby-version: 1.7.9
:jruby_1st-url: link:jruby_1st.html


Version 2.0.2, Dezember 2013


Abstract
--------
Dieser Artikel ist eine Schritt-für-Schritt Anleitung zur Installation 
von {jruby-url}[JRuby 1.7.9] unter GNU/Linux.
 
Die Programmiersprache {ruby-url}[JRuby] ist die Implementation 
von {ruby-url}[Ruby] in Java, die wiederum die Grundlage für das 
WebApplication Framework {rubyonrails-url}[Ruby on Rails] bildet. 

Der Artikel ist in {asciidoc-url}[AsciiDoc] erstellt worden.

[CAUTION]
====
Zu beachten ist, dass so ein Dokument zum Einen nie abschliessend 
sein kann, und zum Anderen bestimmte Konfigurationen anders, oder 
auf einem anderem Weg durchgeführt werden können. +
Gerne nehme ich Verbesserungsvorschläge entgegen.

Es gilt wie immer: Verwendung der Anleitung auf eigene Gefahr.
====


Vorraussetzungen
----------------
Die Installation wird für {ubuntu-url}[Ubuntu 12.04 LTS (Precise Pangolin)] 
beschrieben. Gleichwohl sind die einzelnen Schritte auch für 
andere Distributionen übertragbar.

[TIP]
====
Ubuntu 12.04 LTS (Precise Pangolin) enthält das Paket _jruby_1.5.6-2_all_. 
====


Download
--------
* {jruby-download-url}[JRuby 1.7.9] +    
  jruby-1.7.9-bin.tar.gz  (ca. 20M) +
  2013-12-06 (Release date) -- Expect a new release about every 3 weeks 

[NOTE] 
====
Die neue _JRuby-Version 1.7_ wird seit 18 Monaten mit bestimmten Zielen entwickelt:

. JDK-Version 6 ist (mindestens) notwendig 
. Unterstützung der JDK-Version 7
. JRuby wird als im Modus _Ruby 1.9.3_ ausgeführt (neuer Default)
. JRuby unterstützt das neue Java-Feature 'invokedynamic' +
  (auch wenn es für den Moment ausgeschaltet ist - "due to JVM issues" ) +
  &rarr; http://www.jruby.org/2012/10/22/jruby-1-7-0.html[JRuby 1.7.0 Released]
  
Mein Bauchgefühl sagt:
. JRuby 1.6.x -> JDK 6
. JRuby 1.7.x -> JDK 7

Andere mögliche Kombinationen erhöhen einfach den Beschreibungs-Aufwand
für Support.     
====

[NOTE] 
====
Die Installation des _OpenJDK_ oder des _Oracle JDK_ wurde vom Benutzer 'root' für 
das System durchgeführt &rarr; {jdk-url}[JDK]. +
Während die anschließende Installation von _JRuby_ und _Ruby on Rails_ für 
den Benutzer 'sid' ausgeführt wird. 
----
$ ls -l 
-rw-rw-r-- 1 sid sid 19791385 Dez 12 20:57 jruby-bin-1.7.9.tar.gz
----
====


Installation: JRuby {jruby-version}
-----------------------------------
Zusätzliche Software-Pakete  
sollten im Verzeichnis '/opt' (Optional) installiert werden. 


*Step 1:* Installation im Verzeichnis '/opt/JRuby/sid' (mit Benutzer 'sid')
----
$ mkdir -p /opt/JRuby/sid && chown sid.sid /opt/JRuby/sid
----

----
$ cd /opt/JRuby/sid

$ tar xvzf jruby-bin-1.7.9.tar.gz
[...]

$ ln -s jruby-1.7.9 current
$ ls -l
lrwxrwxrwx 1 sid sid   11 Dez 12 21:02 current -> jruby-1.7.9
drwxrwxr-x 8 sid sid 4096 Okt 17 20:40 jruby-1.6.8
drwxrwxr-x 7 sid sid 4096 Nov 21 22:20 jruby-1.7.0
drwxrwxr-x 7 sid sid 4096 Dez 27 14:53 jruby-1.7.1
drwxrwxr-x 7 sid sid 4096 Jan 16 12:49 jruby-1.7.2
drwxrwxr-x 7 sid sid 4096 Apr 14 13:52 jruby-1.7.3
drwxrwxr-x 7 sid sid 4096 Jun  2 11:53 jruby-1.7.4
drwxrwxr-x 7 sid sid 4096 Okt  9 09:58 jruby-1.7.5
drwxrwxr-x 7 sid sid 4096 Okt 25 11:42 jruby-1.7.6
drwxrwxr-x 7 sid sid 4096 Nov 27 20:55 jruby-1.7.8
drwxrwxr-x 7 sid sid 4096 Dez 12 21:01 jruby-1.7.9
----

Das Programm 'tree' ist ein wunderbares Hilfsmittel zur Darstellung von Verzeichnissen.
----
$ tree -d -L 2 current
current   <1>
├── bin
├── docs
│   ├── jvyaml
│   └── man
├── lib
│   ├── jni
│   └── ruby
├── samples
│   ├── ext
│   ├── ffi
│   ├── jnlp
│   └── jrubyc_java
└── tool
    └── nailgun

14 directories
---- 
<1> JRuby 1.7.9

Die zu diesem Zeitpunkt in JRuby enthaltenen RubyGems.
----
$ tree -d -L 3 current/lib/ruby/gems/
current/lib/ruby/gems/
└── shared
    └── gems
        ├── rake-10.1.0
        └── rdoc-4.0.1

4 directories   <1>
----
<1> Schade. Das vertraute 'sources-0.0.1' _... is gone_ ;-)


*Step 2:* JRuby-Pfad setzen (von au&szlig;en)
Erstellen Sie eine Datei _jruby.path.sh_ (siehe <<_anhang,[Anhang]>>). 

[CAUTION]
====
In der Datei können Sie ebenfalls entscheiden auf welche der zu diesem
Zeitpunkt verfügbaren Java-Versionen Sie sich beziehen.

Wenn Sie die für das System installierte _JDK_-Version verwenden ... bedeutet 
das ... kein Eintrag. Haben Sie eine zusätzliche _JDK_-Version installiert
sollten Sie die hierfür notwendigen Umgebungsvariablen ebenfalls in dieser 
Datei setzen.
==== 

[NOTE] 
=========================================================
Achtung: Ausführen der Datei mit dem Punkt-Operator!
----
$ . jruby.path.sh
---- 
=========================================================


*Step 3:* Installation verifizieren
----
$ which jruby
/opt/JRuby/sid/current/bin/jruby

$ java -version
java version "1.7.0_25"
OpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1ubuntu0.12.04.2)
OpenJDK 64-Bit Server VM (build 23.7-b01, mixed mode)

$ jruby --version
jruby 1.7.9 (1.9.3p392) 2013-12-06 87b108a on OpenJDK 64-Bit Server VM 1.7.0_25-b30 [linux-amd64]

$ jruby -v --1.8   <1>
jruby 1.7.9 (ruby-1.8.7p370) 2013-12-06 87b108a on OpenJDK 64-Bit Server VM 1.7.0_25-b30 [linux-amd64]

$ jruby -v --2.0   <2>
jruby 1.7.9 (2.0.0p195) 2013-12-06 87b108a on OpenJDK 64-Bit Server VM 1.7.0_25-b30 [linux-amd64]
----
<1> Weitere Möglichkeit: + 
    +$ JRUBY_OPTS=--1.8 jruby --version+
<2> Zu diesem Zeitpunkt als Experimentell gekennzeichnet.    

.Interactive Ruby: _jirb_
----
$ jirb
irb(main):001:0> RUBY_VERSION
=> "1.9.3"
irb(main):002:0> RUBY_PATCHLEVEL
=> 392
irb(main):003:0> Time.now.to_s
=> "2013-12-12 21:08:52 +0100"
irb(main):004:0> Time.now.sunday?
=> false
irb(main):005:0> Time.now.thursday?
=> true
irb(main):006:0> exit
----

.RubyGems: _gem_, _jgem_
----
$ jruby -S gem -v   
2.1.9
----

----
$ jgem -v
2.1.9
----

----
$ jruby -S gem list --local

*** LOCAL GEMS ***   <1>


----
<1> Weder _rake_ noch _rdoc_ werden angezeigt (siehe oben)!?

----
$ jgem list --local

*** LOCAL GEMS ***   <1>


----
<1> Weder _rake_ noch _rdoc_ werden angezeigt (siehe oben)!?

----
$ gem install rake   <1>
Fetching: rake-10.1.1.gem (100%)
Successfully installed rake-10.1.0  
1 gem installed
----
<1> Das Fehlen von _rake_ ist ein Fehler im Paket _jruby-bin-1.7.9.tar.gz_
    und muß korrigiert werden!

[NOTE]
====
Der Schalter _-S_ führt dazu, daß für das Script zuerst  
das Verzeichnis JRUBY_HOME/bin geprüft wird - und
erst im Anschluß der gesetzte _PATH_. +
+
Mit der Umgebungsvariablen JRUBY kann der ausgeführte Ruby-Modus 
(_1.8_ oder _1.9_ oder _2.0_) gesteuert werden.

----
$ export JRUBY_OPTS=--1.9
----
 
Mit der JRuby-Version 1.7.x ist der Wert _--1.9_ der Standard!
====

.Ein Test auf Vollständigkeit
----
$ jruby -ropenssl -rzlib -rreadline -e "puts 'Happy new JRuby'"   <1>
Happy new JRuby
----
<1> Die Bibliothek _openssl_ ist in JRuby 1.7 bereits enthalten. +
    Eine vorher notwendige zusätzliche Installation entfällt. +
    &rarr; link:http://jruby.org/openssl[JRuby Builtin OpenSSL Support] 


Rubygems Aktualisierung
-----------------------
_RubyGems_ (oder kurz Gems) ist das offizielle Paketsystem für die 
Programmiersprache Ruby. Mit ihm hat der Anwender die Möglichkeit, 
mehrere (zum Beispiel ältere oder jüngere) Versionen eines Programmes, 
Programmteiles oder einer Bibliothek gesteuert nach Bedarf einzurichten, 
zu verwalten oder auch wieder zu entfernen. +
&rarr; link:http://de.wikipedia.org/wiki/RubyGems[Wikipedia: RubyGems]

[NOTE]
====
Vorraussetzung für die nächsten Befehle ist ein 
funktionierender 'PATH'-Eintrag für den Benutzer 'sid' 
auf die _JRuby 1.7.9_-Installation:

----
$ jruby -v
jruby 1.7.9 (1.9.3p392) 2013-12-06 87b108a on OpenJDK 64-Bit Server VM 1.7.0_25-b30 [linux-amd64]

$ which jruby
/opt/JRuby/sid/current/bin/jruby

$ which jgem
/opt/JRuby/sid/current/bin/jgem

$ which gem
/opt/JRuby/sid/current/bin/gem
----
====

*Step 1:* Das Programm '(j)gem' aktualisieren
----
$ jgem update --system   <1>  
Updating rubygems-update
Fetching: rubygems-update-2.1.11.gem (100%)
Successfully installed rubygems-update-2.1.11
Installing RubyGems 2.1.11
RubyGems 2.1.11 installed

[...]

 -----------------------------------------------------------------------------

RubyGems installed the following executables:
	/opt/JRuby/sid/jruby-1.7.9/bin/jgem

RubyGems system software updated
----
Das Programm '(j)gem' mu&szlig; von Hand aktualisiert werden.

.(j)gem
----
$ jruby -S gem -v 
2.1.11


$ jgem -v
2.1.11


$ gem -v
2.1.11 
----

----
$ jruby -S gem list --local

*** LOCAL GEMS ***

rubygems-update (2.1.11)


$ jgem list --local

*** LOCAL GEMS ***

rake (10.1.0)
rubygems-update (2.1.11)


$ gem list --local

*** LOCAL GEMS ***

rake (10.1.0)
rubygems-update (2.1.11)
----

[NOTE]
====
.(j)gem  
An sich können beide Programme benutzt werden, wobei sowohl der Aufruf
und auch deren Ergebnisse identisch sind.
Sie sind ausschließlich aus Bequemlichkeit
für eine 'private' Sichtweise alternativ vorhanden. 

Das *gem* betont die Verbundenheit zu Ruby, während *jgem*
wiederum auf die Umsetzung in Java hinweist.

Praktisch sollen die Programme _etwas?_ differieren ... und 
das Angebot *jgem* ist _mehr?_ up-to-date ... 

Persönlich favorisiere ich *jruby -S gem ...* -- aber *jgem ...* äh *gem ...* ist kürzer ;-)
====


*Step 2:* Die bereits installierten RubyGems aktualisieren (update)
----
$ gem update
Updating installed gems
Nothing to update
----

----
$ gem list --local

*** LOCAL GEMS ***

rake (10.1.1)              <1>
rubygems-update (2.1.11)
----
<1> Für alle die sich über die hohe Versions-Nummer wundern ;-) +
    &rarr; link:https://github.com/jimweirich/rake/blob/next-major-release/doc/release_notes/rake-10.0.0.rdoc[Rake 10.0 Released]


*Step 3:* Die _Ruby-Documentation_ installieren
----
$ gem install rdoc   
Fetching: json-1.8.1-java.gem (100%)
Successfully installed json-1.8.1-java
Fetching: rdoc-4.0.1.gem (100%)
Depending on your version of ruby, you may need to install ruby rdoc/ri data:

<= 1.8.6 : unsupported
 = 1.8.7 : gem install rdoc-data; rdoc-data --install
 = 1.9.1 : gem install rdoc-data; rdoc-data --install
>= 1.9.2 : nothing to do! Yay!
Successfully installed rdoc-4.0.1
2 gems installed
----

----
$ ri Array#each
Nothing known about Array   <1>
----
<1> Das RubyGem _rdoc_ alleine reicht nicht für _JRuby_! 

----
$ gem install rdoc-data
Fetching: rdoc-data-4.0.1.gem (100%)
rdoc-data is only required for C ruby 1.8.7 or 1.9.1.

rdoc-data is required for JRuby.

To install ri data for RDoc 4.0+ run:

  rdoc-data --install

Successfully installed rdoc-data-4.0.1
1 gem installed
----

----
$ which rdoc-data
/opt/JRuby/sid/current/bin/rdoc-data

$ rdoc-data --install
----

----
$ ri Array#each
= Array#each

(from ruby core)
 -----------------------------------------------------------------------------
  ary.each {|item| block }   -> ary
  ary.each                   -> an_enumerator

 -----------------------------------------------------------------------------

Calls block once for each element in self, passing that element as a
parameter.

If no block is given, an enumerator is returned instead.

  a = [ "a", "b", "c" ]
  a.each {|x| print x, " -- " }

produces:

  a -- b -- c --
----

----
$ gem list --local

*** LOCAL GEMS ***

json (1.8.1 java)
rake (10.1.1)
rdoc (4.0.1)
rdoc-data (4.0.1)
rubygems-update (2.1.11)
----

Auf die installierte Dokumentation zugreifen.
----
$ gem server
Server started at http://[0:0:0:0:0:0:0:0]:8808
----

----
Browser> http://localhost:8808/
         RubyGems Documentation Index   
----

image::images/jruby/rubygems_documentation_index.jpeg[RubyGems Documentation Index]


Installation: Ruby on Rails 4.0.2
---------------------------------

*Step 0:*  
----
$ gem search ^rails --remote   <1>

*** REMOTE GEMS ***

rails (4.0.2)
rails-3-settings (0.1.1)
rails-action-args (0.1.1)
rails-admin (0.0.0)
rails-admin-scaffold (0.0.2)
rails-ajax (0.3.0.20130913)
[...]
railsware-workflow (0.8.1)
railswhere (0.2)
railsy_backbone (0.0.5)
----
<1> Für die Suche wird die Schreibweise nicht berücksichtigt. +
    Zum aktuellen Zeitpunkt (27.11.2013) enthält das Suchergebnis _559 RubyGems_!

----
$ gem search ^rails$ --remote

*** REMOTE GEMS ***

rails (4.0.2)
----

*Step 1:* Grundinstallation von 'Ruby on Rails'
----
$ gem install rails --no-rdoc --no-ri   <1>
Fetching: i18n-0.6.9.gem (100%)
Successfully installed i18n-0.6.9
[...]
Fetching: rails-4.0.2.gem (100%)
Successfully installed rails-4.0.2
29 gems installed   <2>
----
<1> Die Dokumentation wird wg. eines RDoc-Fehler im RubyGem _builder_ nachträglich installiert.
<2> Für das Framework _Ruby on Rails_ wurden 29 RubyGems installiert. +
    Hinweis: Weitere RubyGems müssen installiert werden (Datenbank-Treiber, Erweiterungen). 

.RDoc
----
$ gem list --local | sed 's/ (.*$//' > gemlist

$ for name in `cat gemlist`; do echo $name; gem rdoc $name; echo; done;   <1>
[...]
----
<1> Mit dem Befehl _gem rdoc ..._ wird ausschließlich die noch nicht vorhandene
    Dokumentation für das jeweilige RubyGem erstellt.

[NOTE]
====
Alternativ kann Rails mit der Angabe einer Version installiert werden.
----
$ gem install rails --version 4.0.2

$ gem install rails --version '~> 4.0.2'   <1>
----
<1> Twiddle Wakka: '~> 4.0.2' bedeutet, das die höchste Gem-Version von Rails
    im Bereich von >= 4.0.2 und < 4.1 installiert wird. 
====


*Step 2:* Datenbankzugriff (via JDBC)
----
$ gem install activerecord-jdbc-adapter --no-rdoc --no-ri
Fetching: activerecord-jdbc-adapter-1.3.4.gem (100%)
Successfully installed activerecord-jdbc-adapter-1.3.4
1 gem installed
----

----
$ gem install activerecord-jdbcmysql-adapter activerecord-jdbcsqlite3-adapter --no-rdoc --no-ri   <1>   
Fetching: jdbc-mysql-5.1.27.gem (100%)
Successfully installed jdbc-mysql-5.1.27
Fetching: activerecord-jdbcmysql-adapter-1.3.4.gem (100%)
Successfully installed activerecord-jdbcmysql-adapter-1.3.4
Fetching: jdbc-sqlite3-3.7.2.1.gem (100%)
Successfully installed jdbc-sqlite3-3.7.2.1
Fetching: activerecord-jdbcsqlite3-adapter-1.3.4.gem (100%)
Successfully installed activerecord-jdbcsqlite3-adapter-1.3.4
4 gems installed
----
<1> DBMS: _MySQL_, _SQLite3_

*Step 3:* WebServer 
----
$ gem install glassfish --no-rdoc --no-ri   <1>
Fetching: glassfish-1.0.3-universal-java.gem (100%)
Successfully installed glassfish-1.0.3-universal-java
1 gem installed
----
<1> Der WebServer _WEBrick_ ist Teil von JRuby!

*Step 4:* WAR (WAR ist ein Dateiformat und steht für Web Application Archive) 
----
$ gem install warbler --no-rdoc --no-ri
Fetching: jruby-jars-1.7.9.gem (100%)
Successfully installed jruby-jars-1.7.9
Fetching: jruby-rack-1.1.13.3.gem (100%)
Successfully installed jruby-rack-1.1.13.3
Fetching: rubyzip-1.0.0.gem (100%)
Successfully installed rubyzip-1.0.0
Fetching: warbler-1.4.0.gem (100%)
Successfully installed warbler-1.4.0
4 gems installed
----

*Step 5:* Erweiterungen
----
$ gem install sinatra --no-rdoc --no-ri   <1>
Fetching: rack-protection-1.5.1.gem (100%)
Successfully installed rack-protection-1.5.1
Fetching: sinatra-1.4.4.gem (100%)
Successfully installed sinatra-1.4.4
2 gems installed
----
<1> Sinatra ist eine freie und open source Webapplikationsbibliothek und 
    eine in Ruby geschriebene domänenspezifische Sprache. +
    &rarr; link:http://de.wikipedia.org/wiki/Sinatra_%28Software%29[Wikipedia: Sinatra (Software)]

*Step 6:* Liste der installierte RubyGems
----
$ gem list --local

*** LOCAL GEMS ***

actionmailer (4.0.2)
actionpack (4.0.2)
activemodel (4.0.2)
activerecord (4.0.2)
activerecord-deprecated_finders (1.0.3)
activerecord-jdbc-adapter (1.3.4)
activerecord-jdbcmysql-adapter (1.3.4)
activerecord-jdbcsqlite3-adapter (1.3.4)
activesupport (4.0.2)
arel (4.0.1)
atomic (1.1.14 java)
builder (3.1.4)
bundler (1.5.1)
erubis (2.7.0)
glassfish (1.0.3 universal-java)
hike (1.2.3)
i18n (0.6.9)
jdbc-mysql (5.1.27)
jdbc-sqlite3 (3.7.2.1)
jruby-jars (1.7.9)
jruby-rack (1.1.13.3)
json (1.8.1 java)
mail (2.5.4)
mime-types (1.25.1)
minitest (4.7.5)
multi_json (1.8.2)
polyglot (0.3.3)
rack (1.5.2)
rack-protection (1.5.1)
rack-test (0.6.2)
rails (4.0.2)
railties (4.0.2)
rake (10.1.0)
rdoc (4.0.1)
rdoc-data (4.0.1)
rubygems-update (2.1.11)
rubyzip (1.0.0)
sinatra (1.4.4)
sprockets (2.10.1)
sprockets-rails (2.0.1)
thor (0.18.1)
thread_safe (0.1.3 java)
tilt (1.4.1)
treetop (1.4.15)
tzinfo (0.3.38)
warbler (1.4.0)
----


Beispiel
--------
{jruby_1st-url}[Rails 4: Erste Schritte &hellip; mit JRuby]


Anhang
------
Scripte zum Setzen der Umgebung von *JRuby* (ohne weitere Erläuterung)


.JRuby (mit System-JDK )
----
JRUBY_HOME=/opt/JRuby/sid/current
#JRUBY_OPTS=--1.8   <1>

PATH=$JRUBY_HOME/bin:$PATH

export JRUBY_HOME
#export JRUBY_OPTS

export PATH
----
<1> JRuby wird im Modus _Ruby 1.8.7_ ausgeführt.


.JRuby (mit separatem JDK)
----
JAVA_BINDIR=/opt/Java/current/bin   <1>
JAVA_HOME=/opt/Java/current
JDK_HOME=/opt/Java/current
JRE_HOME=/opt/Java/current

JRUBY_HOME=/opt/JRuby/sid/current
#JRUBY_OPTS=--1.8   <2>

# Tomcat
#CATALINA_OPTS='-server -Xms512m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=512m'

PATH=$JAVA_BINDIR:$JRUBY_HOME/bin:$PATH

export JAVA_BINDIR
export JAVA_HOME
export JDK_HOME
export JRE_HOME

export JRUBY_HOME
#export JRUBY_OPTS

#export CATALINA_OPTS

export PATH
----
<1> Eine von Hand installierte _JDK_-Version 
<2> JRuby wird im Modus _Ruby 1.8.7_ ausgeführt.
